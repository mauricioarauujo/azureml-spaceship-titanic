{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Automated ML\n",
        "\n",
        "TODO: Import Dependencies. In the cell below, import all the dependencies that you will need to complete the project."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import logging\n",
        "import os\n",
        "import csv\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn import datasets\n",
        "import pkg_resources\n",
        "\n",
        "import azureml.core\n",
        "from azureml.core.experiment import Experiment\n",
        "from azureml.core.workspace import Workspace\n",
        "from azureml.train.automl import AutoMLConfig\n",
        "from azureml.core.dataset import Dataset\n",
        "from azureml.pipeline.core import Pipeline\n",
        "\n",
        "from azureml.pipeline.steps import AutoMLStep\n",
        "\n",
        "# Check core SDK version number\n",
        "print(\"SDK version:\", azureml.core.VERSION)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "SDK version: 1.51.0\n"
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1706750456961
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ws = Workspace.from_config()\n",
        "\n",
        "# choose a name for experiment\n",
        "experiment_name = 'automl-experiment'\n",
        "\n",
        "experiment=Experiment(ws, experiment_name)"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1706750457881
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.compute import AmlCompute\n",
        "from azureml.core.compute import ComputeTarget\n",
        "from azureml.core.compute_target import ComputeTargetException\n",
        "\n",
        "# NOTE: update the cluster name to match the existing cluster\n",
        "# Choose a name for your CPU cluster\n",
        "amlcompute_cluster_name = \"my-cluster\"\n",
        "\n",
        "# Verify that cluster does not exist already\n",
        "try:\n",
        "    compute_target = ComputeTarget(workspace=ws, name=amlcompute_cluster_name)\n",
        "    print('Found existing cluster, use it.')\n",
        "except ComputeTargetException:\n",
        "    compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_D2_V2',# for GPU, use \"STANDARD_NC6\"\n",
        "                                                           #vm_priority = 'lowpriority', # optional\n",
        "                                                           max_nodes=4)\n",
        "    compute_target = ComputeTarget.create(ws, amlcompute_cluster_name, compute_config)\n",
        "\n",
        "compute_target.wait_for_completion(show_output=True)\n",
        "# For a more detailed view of current AmlCompute status, use get_status()."
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "InProgress..\nSucceededProvisioning operation finished, operation \"Succeeded\"\nSucceeded\nAmlCompute wait for completion finished\n\nMinimum number of nodes requested have been provisioned\n"
        }
      ],
      "execution_count": 3,
      "metadata": {
        "gather": {
          "logged": 1706750469394
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Dataset\n",
        "\n",
        "### Overview\n",
        "TODO: In this markdown cell, give an overview of the dataset you are using. Also mention the task you will be performing.\n",
        "\n",
        "\n",
        "TODO: Get data. In the cell below, write code to access the data you will be using in this project. Remember that the dataset needs to be external."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "project_name = 'azureml-spaceship-titanic'\n",
        "project_folder = os.getcwd().split(project_name)[0] + project_name"
      ],
      "outputs": [],
      "execution_count": 4,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1706750530450
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "sys.path.append(project_folder)\n",
        "\n",
        "from src.pipelines.preprocess import preprocess_data\n",
        "\n",
        "df = pd.read_csv('../data/01_raw/train.csv')\n",
        "processed_df = preprocess_data(df).drop(columns=[\"PassengerId\"])\n"
      ],
      "outputs": [],
      "execution_count": 5,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1706750532400
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_name = \"Spaceship_Dataset\"\n",
        "description_text = \"Data to predict which passengers are transported to an alternate dimension\"\n",
        "\n",
        "# Create AML Dataset and register it into Workspace\n",
        "dataset = Dataset.Tabular.register_pandas_dataframe(processed_df, ws.get_default_datastore(), dataset_name)   \n",
        "#Register Dataset in Workspace\n",
        "dataset = dataset.register(workspace=ws,\n",
        "                                name=dataset_name,\n",
        "                                description=description_text,\n",
        "                                create_new_version=True\n",
        "                        )\n",
        "\n",
        "\n",
        "df = dataset.to_pandas_dataframe()\n",
        "df.describe()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Validating arguments.\nArguments validated.\nSuccessfully obtained datastore reference and path.\nUploading file to managed-dataset/2c14ff68-e921-4218-a905-a701c2c63e66/\nSuccessfully uploaded file to datastore.\nCreating and registering a new dataset.\nSuccessfully created and registered a new dataset.\n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "        RoomService     FoodCourt  ShoppingMall           Spa        VRDeck  \\\ncount   8512.000000   8510.000000   8485.000000   8510.000000   8505.000000   \nmean     224.687617    458.077203    173.729169    311.138778    304.854791   \nstd      666.717663   1611.489240    604.696458   1136.705535   1145.717189   \nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \n25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n75%       47.000000     76.000000     27.000000     59.000000     46.000000   \nmax    14327.000000  29813.000000  23492.000000  22408.000000  24133.000000   \n\n       People_in_Cabin_Num  People_in_Cabin_Deck  Family_Size   Group_Size  \ncount          8494.000000           8494.000000  8493.000000  8693.000000  \nmean              8.037203           1952.105957     5.428117     2.035546  \nstd               5.214669            963.741893     2.891901     1.596347  \nmin               1.000000              5.000000     1.000000     1.000000  \n25%               4.000000            779.000000     3.000000     1.000000  \n50%               7.000000           2559.000000     5.000000     1.000000  \n75%              12.000000           2794.000000     7.000000     3.000000  \nmax              28.000000           2794.000000    18.000000     8.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RoomService</th>\n      <th>FoodCourt</th>\n      <th>ShoppingMall</th>\n      <th>Spa</th>\n      <th>VRDeck</th>\n      <th>People_in_Cabin_Num</th>\n      <th>People_in_Cabin_Deck</th>\n      <th>Family_Size</th>\n      <th>Group_Size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>8512.000000</td>\n      <td>8510.000000</td>\n      <td>8485.000000</td>\n      <td>8510.000000</td>\n      <td>8505.000000</td>\n      <td>8494.000000</td>\n      <td>8494.000000</td>\n      <td>8493.000000</td>\n      <td>8693.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>224.687617</td>\n      <td>458.077203</td>\n      <td>173.729169</td>\n      <td>311.138778</td>\n      <td>304.854791</td>\n      <td>8.037203</td>\n      <td>1952.105957</td>\n      <td>5.428117</td>\n      <td>2.035546</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>666.717663</td>\n      <td>1611.489240</td>\n      <td>604.696458</td>\n      <td>1136.705535</td>\n      <td>1145.717189</td>\n      <td>5.214669</td>\n      <td>963.741893</td>\n      <td>2.891901</td>\n      <td>1.596347</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>5.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n      <td>779.000000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.000000</td>\n      <td>2559.000000</td>\n      <td>5.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>47.000000</td>\n      <td>76.000000</td>\n      <td>27.000000</td>\n      <td>59.000000</td>\n      <td>46.000000</td>\n      <td>12.000000</td>\n      <td>2794.000000</td>\n      <td>7.000000</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>14327.000000</td>\n      <td>29813.000000</td>\n      <td>23492.000000</td>\n      <td>22408.000000</td>\n      <td>24133.000000</td>\n      <td>28.000000</td>\n      <td>2794.000000</td>\n      <td>18.000000</td>\n      <td>8.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1706750541962
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## AutoML Configuration\n",
        "\n",
        "TODO: Explain why you chose the automl settings and cofiguration you used below."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.widgets import RunDetails\n",
        "\n",
        "automl_settings = {\n",
        "    \"experiment_timeout_minutes\": 20,\n",
        "    \"max_concurrent_iterations\": 4,\n",
        "    \"primary_metric\" : 'accuracy',\n",
        "    \"n_cross_validations\": 5,\n",
        "}\n",
        "automl_config = AutoMLConfig(compute_target=compute_target,\n",
        "                             task = \"classification\",\n",
        "                             training_data=dataset,\n",
        "                             label_column_name=\"Transported\",   \n",
        "                             path = project_folder + '/automl-pipeline',\n",
        "                             enable_early_stopping= True,\n",
        "                             featurization= 'auto',\n",
        "                             debug_log = \"automl_errors.log\",\n",
        "                             **automl_settings\n",
        "                            )"
      ],
      "outputs": [],
      "execution_count": 17,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1706752851097
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Run Details\n",
        "\n",
        "OPTIONAL: Write about the different models trained and their performance. Why do you think some models did better than others?\n",
        "\n",
        "TODO: In the cell below, use the `RunDetails` widget to show the different experiments."
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "automl_run = experiment.submit(automl_config)\n",
        "RunDetails(automl_run).show()\n",
        "automl_run.wait_for_completion()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Submitting remote run.\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": "<table style=\"width:100%\"><tr><th>Experiment</th><th>Id</th><th>Type</th><th>Status</th><th>Details Page</th><th>Docs Page</th></tr><tr><td>automl-experiment</td><td>AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400</td><td>automl</td><td>NotStarted</td><td><a href=\"https://ml.azure.com/runs/AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400?wsid=/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourcegroups/aml-quickstarts-251237/workspaces/quick-starts-ws-251237&amp;tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/overview/azure/ml/intro?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_AutoMLWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', 's…",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "64c9ad1dd5e84df5a639351c98dd9c17"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400?wsid=/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourcegroups/aml-quickstarts-251237/workspaces/quick-starts-ws-251237&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"run_properties\": {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"created_utc\": \"2024-02-01T02:00:57.379152Z\", \"properties\": {\"num_iterations\": \"1000\", \"training_type\": \"TrainFull\", \"acquisition_function\": \"EI\", \"primary_metric\": \"accuracy\", \"train_split\": \"0\", \"acquisition_parameter\": \"0\", \"num_cross_validation\": \"5\", \"target\": \"my-cluster\", \"AMLSettingsJsonString\": \"{\\\"path\\\":null,\\\"name\\\":\\\"automl-experiment\\\",\\\"subscription_id\\\":\\\"f9d5a085-54dc-4215-9ba6-dad5d86e60a0\\\",\\\"resource_group\\\":\\\"aml-quickstarts-251237\\\",\\\"workspace_name\\\":\\\"quick-starts-ws-251237\\\",\\\"region\\\":\\\"westus2\\\",\\\"compute_target\\\":\\\"my-cluster\\\",\\\"spark_service\\\":null,\\\"azure_service\\\":\\\"remote\\\",\\\"many_models\\\":false,\\\"pipeline_fetch_max_batch_size\\\":1,\\\"enable_batch_run\\\":true,\\\"enable_parallel_run\\\":false,\\\"num_procs\\\":null,\\\"enable_run_restructure\\\":false,\\\"start_auxiliary_runs_before_parent_complete\\\":false,\\\"enable_code_generation\\\":true,\\\"iterations\\\":1000,\\\"primary_metric\\\":\\\"accuracy\\\",\\\"task_type\\\":\\\"classification\\\",\\\"positive_label\\\":null,\\\"data_script\\\":null,\\\"test_size\\\":0.0,\\\"test_include_predictions_only\\\":false,\\\"validation_size\\\":0.0,\\\"n_cross_validations\\\":5,\\\"y_min\\\":null,\\\"y_max\\\":null,\\\"num_classes\\\":null,\\\"featurization\\\":\\\"auto\\\",\\\"_ignore_package_version_incompatibilities\\\":false,\\\"is_timeseries\\\":false,\\\"max_cores_per_iteration\\\":1,\\\"max_concurrent_iterations\\\":4,\\\"iteration_timeout_minutes\\\":null,\\\"mem_in_mb\\\":null,\\\"enforce_time_on_windows\\\":false,\\\"experiment_timeout_minutes\\\":20,\\\"experiment_exit_score\\\":null,\\\"partition_column_names\\\":null,\\\"whitelist_models\\\":null,\\\"blacklist_algos\\\":[\\\"TensorFlowLinearClassifier\\\",\\\"TensorFlowDNN\\\"],\\\"supported_models\\\":[\\\"SVM\\\",\\\"DecisionTree\\\",\\\"LogisticRegression\\\",\\\"XGBoostClassifier\\\",\\\"BernoulliNaiveBayes\\\",\\\"ExtremeRandomTrees\\\",\\\"AveragedPerceptronClassifier\\\",\\\"TensorFlowDNN\\\",\\\"TensorFlowLinearClassifier\\\",\\\"LinearSVM\\\",\\\"GradientBoosting\\\",\\\"TabnetClassifier\\\",\\\"KNN\\\",\\\"LightGBM\\\",\\\"MultinomialNaiveBayes\\\",\\\"RandomForest\\\",\\\"SGD\\\"],\\\"private_models\\\":[],\\\"auto_blacklist\\\":true,\\\"blacklist_samples_reached\\\":false,\\\"exclude_nan_labels\\\":true,\\\"verbosity\\\":20,\\\"_debug_log\\\":\\\"azureml_automl.log\\\",\\\"show_warnings\\\":false,\\\"model_explainability\\\":true,\\\"service_url\\\":null,\\\"sdk_url\\\":null,\\\"sdk_packages\\\":null,\\\"enable_onnx_compatible_models\\\":false,\\\"enable_split_onnx_featurizer_estimator_models\\\":false,\\\"vm_type\\\":\\\"STANDARD_D2_V2\\\",\\\"telemetry_verbosity\\\":20,\\\"send_telemetry\\\":true,\\\"enable_dnn\\\":false,\\\"scenario\\\":\\\"AutoML\\\",\\\"environment_label\\\":null,\\\"save_mlflow\\\":false,\\\"enable_categorical_indicators\\\":false,\\\"force_text_dnn\\\":false,\\\"enable_feature_sweeping\\\":true,\\\"enable_early_stopping\\\":true,\\\"early_stopping_n_iters\\\":10,\\\"arguments\\\":null,\\\"dataset_id\\\":\\\"9e16fe1e-598a-446e-a385-f0c5a7236c50\\\",\\\"hyperdrive_config\\\":null,\\\"validation_dataset_id\\\":null,\\\"run_source\\\":null,\\\"metrics\\\":null,\\\"enable_metric_confidence\\\":false,\\\"enable_ensembling\\\":true,\\\"enable_stack_ensembling\\\":true,\\\"ensemble_iterations\\\":15,\\\"enable_tf\\\":false,\\\"enable_subsampling\\\":null,\\\"subsample_seed\\\":null,\\\"enable_nimbusml\\\":false,\\\"enable_streaming\\\":false,\\\"force_streaming\\\":false,\\\"track_child_runs\\\":true,\\\"n_best_runs\\\":1,\\\"allowed_private_models\\\":[],\\\"label_column_name\\\":\\\"Transported\\\",\\\"weight_column_name\\\":null,\\\"cv_split_column_names\\\":null,\\\"enable_local_managed\\\":false,\\\"_local_managed_run_id\\\":null,\\\"cost_mode\\\":1,\\\"lag_length\\\":0,\\\"metric_operation\\\":\\\"maximize\\\",\\\"preprocess\\\":true}\", \"DataPrepJsonString\": \"{\\\\\\\"training_data\\\\\\\": {\\\\\\\"datasetId\\\\\\\": \\\\\\\"9e16fe1e-598a-446e-a385-f0c5a7236c50\\\\\\\"}, \\\\\\\"datasets\\\\\\\": 0}\", \"EnableSubsampling\": null, \"runTemplate\": \"AutoML\", \"azureml.runsource\": \"automl\", \"display_task_type\": \"classification\", \"dependencies_versions\": \"{\\\"azureml-dataprep-native\\\": \\\"38.0.0\\\", \\\"azureml-dataprep\\\": \\\"4.10.8\\\", \\\"azureml-dataprep-rslex\\\": \\\"2.17.12\\\", \\\"azureml-train-automl-runtime\\\": \\\"1.51.0.post2\\\", \\\"azureml-train-automl-client\\\": \\\"1.51.0.post1\\\", \\\"azureml-training-tabular\\\": \\\"1.51.0.post1\\\", \\\"azureml-automl-runtime\\\": \\\"1.51.0.post1\\\", \\\"azureml-automl-core\\\": \\\"1.51.0.post1\\\", \\\"azureml-mlflow\\\": \\\"1.51.0\\\", \\\"azureml-datadrift\\\": \\\"1.51.0\\\", \\\"azureml-pipeline\\\": \\\"1.51.0\\\", \\\"azureml-contrib-dataset\\\": \\\"1.51.0\\\", \\\"azureml-contrib-notebook\\\": \\\"1.51.0\\\", \\\"azureml-accel-models\\\": \\\"1.51.0\\\", \\\"azureml-automl-dnn-nlp\\\": \\\"1.51.0\\\", \\\"azureml-pipeline-core\\\": \\\"1.51.0\\\", \\\"azureml-responsibleai\\\": \\\"1.51.0\\\", \\\"azureml-contrib-automl-pipeline-steps\\\": \\\"1.51.0\\\", \\\"azureml-pipeline-steps\\\": \\\"1.51.0\\\", \\\"azureml-core\\\": \\\"1.51.0\\\", \\\"azureml-contrib-reinforcementlearning\\\": \\\"1.51.0\\\", \\\"azureml-contrib-server\\\": \\\"1.51.0\\\", \\\"azureml-opendatasets\\\": \\\"1.51.0\\\", \\\"azureml-contrib-services\\\": \\\"1.51.0\\\", \\\"azureml-telemetry\\\": \\\"1.51.0\\\", \\\"azureml-train-restclients-hyperdrive\\\": \\\"1.51.0\\\", \\\"azureml-interpret\\\": \\\"1.51.0\\\", \\\"azureml-train-core\\\": \\\"1.51.0\\\", \\\"azureml-tensorboard\\\": \\\"1.51.0\\\", \\\"azureml-train\\\": \\\"1.51.0\\\", \\\"azureml-contrib-pipeline-steps\\\": \\\"1.51.0\\\", \\\"azureml-explain-model\\\": \\\"1.51.0\\\", \\\"azureml-cli-common\\\": \\\"1.51.0\\\", \\\"azureml-widgets\\\": \\\"1.51.0\\\", \\\"azureml-train-automl\\\": \\\"1.51.0\\\", \\\"azureml-defaults\\\": \\\"1.51.0\\\", \\\"azureml-contrib-fairness\\\": \\\"1.51.0\\\", \\\"azureml-sdk\\\": \\\"1.51.0\\\", \\\"azureml-dataset-runtime\\\": \\\"1.51.0\\\", \\\"azureml-inference-server-http\\\": \\\"0.8.4\\\"}\", \"_aml_system_scenario_identification\": \"Remote.Parent\", \"ClientType\": \"SDK\", \"PlatformVersion\": \"DPV1\", \"environment_cpu_name\": \"AzureML-AutoML\", \"environment_cpu_label\": \"scikit-upgrade2\", \"environment_gpu_name\": \"AzureML-AutoML-GPU\", \"environment_gpu_label\": \"scikit-upgrade2\", \"root_attribution\": \"automl\", \"attribution\": \"AutoML\", \"Orchestrator\": \"AutoML\", \"CancelUri\": \"https://westus2.api.azureml.ms/jasmine/v1.0/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourceGroups/aml-quickstarts-251237/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-251237/experimentids/b27e4690-6f70-4c91-9b6d-e07efc0defd7/cancel/AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"ClientSdkVersion\": null, \"snapshotId\": \"00000000-0000-0000-0000-000000000000\", \"SetupRunId\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_setup\", \"SetupRunContainerId\": \"dcid.AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_setup\", \"FeaturizationRunJsonPath\": \"featurizer_container.json\", \"FeaturizationRunId\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_featurize\", \"ProblemInfoJsonString\": \"{\\\"dataset_num_categorical\\\": 0, \\\"is_sparse\\\": true, \\\"subsampling\\\": false, \\\"has_extra_col\\\": true, \\\"dataset_classes\\\": 2, \\\"dataset_features\\\": 59, \\\"dataset_samples\\\": 8693, \\\"single_frequency_class_detected\\\": false}\", \"ModelExplainRunId\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_ModelExplain\"}, \"tags\": {\"model_explain_run\": \"best_run\", \"_aml_system_automl_run_workspace_id\": \"11716cdb-b991-4fd3-8e03-4e4488b6e5db\", \"_aml_system_azureml.automlComponent\": \"AutoML\", \"pipeline_id_000\": \"5a8eb9d9f67b1dd7e9e4062585daa2417ea78989;5dfac790c5c209f98a1da2dc1c7fb76f0397324f;5304e705d6f401cb07f85bcf0ca59ac1f84dfcf5;35b8e2db3c5f6e714072e1be9f0210fe48426975;294650ec23bc3d067a4972de7ceb12f6e97260fa;c7af0367625be6ac5c2fecbfc72ed444cb7a2111;da45f657e4591caadf1589a85a1f7b8932585595;3caa818370e5e0c328d6266c359019bd31681270;799d2168db11fc19b9e1c6c1df62f8981ad39fe9;797e3e972ad02d947be4c64d2b06b775b6df7a49;79ebb3b8c385e3190e3dd4c1fa28b74730528045;44b5d2d23120dfcf96a7dc6389a293d17a966b1b;3fd2e115482e0c7b92aa3297688aefb6c3aa6fb8;589334a57221e0720a95cf217c065115a7b841d1;3735210984ea10097d5c91905cf6300ac278cd89;1dfdf370ba770047b14bfa59c40920815defcdab;5235e3d56688f5f38ef82d73fba7c2e698fc1af2;17f87d449bb43aaf3cdae4b7eb6dd6e7fbdaf343;dc68fbd594530b5d52812dd9b3ffa3d6d8ba625e;e478544eb8734c07a1943f5bdf4e6605be6943df;2032292dd602836ed754a266c771ac100c4c80dc;1b9ea9b05e1aba0cfbaa30fae26f336a29920979;fedbb4995d6de479c513576119965d71276f03d1;f52e31edb9a1c79d3094620546ebbc7788edbaf8;675ec1c734ed516311cf5441a13a05b407df5a00;f30f2a8af729fc5f46b66adc6464f3df6c9c753f;1ba5554280c84fd9076073ac8862a27b7f59ff74;facbf4b411275dadcb73059b418638c7909308ab;a34bc4bda7635db537fa5fcc31a922158b179946;8cb70774adbfaf1a95780a248e76a10691b2d3ce;e6032414b604c873a6977d5a708378108c89afa7;85bd4b12621c37f68a6ed687cc076a6f10a67ffc;04c1507aa326b2ef5d41ce4796b7e91f113b0ae9;773679153f7e340611bbf8f822206dae955d94a6;9547acd1d3457f977580690ae122213be1a03075;a1a8a8d721a4a21920496cad156c2cb8a18be08a;__AutoML_Stack_Ensemble__;__AutoML_Ensemble__\", \"score_000\": \"0.7835026148249957;0.8055900279977845;0.7894840559532184;0.8044392800115935;0.788563986948043;0.7991491479237237;0.7947747174248655;0.7851131326218856;0.735533165562791;0.7815468726322484;0.72863125839156;0.7981129453523744;0.799723661668181;0.8002986386234434;0.804554487156157;0.7832727299196461;0.7930500512509668;0.7644067493784704;0.8063968088745896;0.8019097519770829;0.7732654575100038;0.8045550827129067;0.7854592834393535;0.7946597749721909;0.7312771846841333;0.793509821061666;0.7955827555881422;0.7923615214754455;0.7977681841673223;0.5036235657835443;0.8035202036010007;0.8047856293479778;0.7833888634858202;0.7793615102260402;NaN;0.8020238341811193;0.8091559571225609;0.8115716014719517\", \"predicted_cost_000\": \"0.5;0;0.5;0.5;0.5;0;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.3747093802628761;0.5;0.1841570587476211;1.2612043356239517;0.8095205942361852;0.9728780889212237;0.7059226296880103;1.1227455209885664;1.5512829789218814;1.3661306118223946;0.01747323687621535;0.4870347814272559;0.765944351397544;6.850219792916793;0.12581553208262686;0.6785549905283299;0.8261081694778347;0;0\", \"fit_time_000\": \"0.0808622;0.24669400000000002;0.0759842;0.1382292;0.1962564;1.0265508;0.41380680000000003;0.3534122;0.4833342;0.12912200000000001;0.111219;0.36610519999999996;0.26052020000000004;0.131747;0.100325;1.3572342000000002;0.15020239999999999;0.38471019999999995;0.4365984;0.2681125999999999;3.595617;0.6061416000000002;7.025494599999999;0.20624659999999997;0.35344099999999995;0.3203742;6.9598678000000005;4.519797200000001;3.2875357999999997;0.10458339999999999;1.6347818;5.0709952000000005;4.3773652;0.1078476;NaN;0.364527;41;35\", \"training_percent_000\": \"100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100\", \"iteration_000\": \"10;0;5;11;6;1;12;7;2;13;8;3;14;9;4;15;16;17;18;21;19;22;20;23;24;27;25;26;28;30;31;29;32;33;35;34;37;36\", \"run_preprocessor_000\": \"SparseNormalizer;MaxAbsScaler;MaxAbsScaler;StandardScalerWrapper;StandardScalerWrapper;MaxAbsScaler;MaxAbsScaler;MaxAbsScaler;MaxAbsScaler;MaxAbsScaler;StandardScalerWrapper;SparseNormalizer;StandardScalerWrapper;StandardScalerWrapper;MaxAbsScaler;SparseNormalizer;StandardScalerWrapper;StandardScalerWrapper;StandardScalerWrapper;StandardScalerWrapper;TruncatedSVDWrapper;SparseNormalizer;TruncatedSVDWrapper;StandardScalerWrapper;TruncatedSVDWrapper;StandardScalerWrapper;SparseNormalizer;SparseNormalizer;SparseNormalizer;StandardScalerWrapper;SparseNormalizer;SparseNormalizer;StandardScalerWrapper;MaxAbsScaler;StandardScalerWrapper;SparseNormalizer;;\", \"run_algorithm_000\": \"LightGBM;LightGBM;LightGBM;XGBoostClassifier;XGBoostClassifier;XGBoostClassifier;LogisticRegression;LogisticRegression;ExtremeRandomTrees;SGD;ExtremeRandomTrees;XGBoostClassifier;XGBoostClassifier;XGBoostClassifier;LightGBM;RandomForest;LogisticRegression;RandomForest;XGBoostClassifier;XGBoostClassifier;RandomForest;XGBoostClassifier;RandomForest;LogisticRegression;XGBoostClassifier;XGBoostClassifier;XGBoostClassifier;XGBoostClassifier;XGBoostClassifier;XGBoostClassifier;XGBoostClassifier;XGBoostClassifier;XGBoostClassifier;LightGBM;XGBoostClassifier;XGBoostClassifier;StackEnsemble;VotingEnsemble\", \"dynamic_allowlisting_iterations\": \"<24>;<30>;<35>;\", \"_aml_system_azureml.automl_early_exit_message\": \"No scores improved over last 10 iterations, so experiment stopped early. This early stopping behavior can be disabled by setting enable_early_stopping = False in AutoMLConfig for notebook/python SDK runs.\", \"automl_best_child_run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_36\", \"model_explain_best_run_child_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_36\"}, \"end_time_utc\": \"2024-02-01T02:18:49.756513Z\", \"status\": \"Completed\", \"log_files\": {}, \"log_groups\": [], \"run_duration\": \"0:17:52\", \"run_number\": \"1706752857\", \"run_queued_details\": {\"status\": \"Completed\", \"details\": null}}, \"child_runs\": [{\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_setup\", \"run_number\": 1706752869, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2024-02-01T02:01:37.343185Z\", \"end_time\": \"2024-02-01T02:04:52.754891Z\", \"created_time\": \"2024-02-01T02:01:09.604301Z\", \"created_time_dt\": \"2024-02-01T02:01:09.604301Z\", \"duration\": \"0:03:43\", \"iteration\": null, \"goal\": null, \"run_name\": \"Completed\", \"run_properties\": null}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_featurize\", \"run_number\": 1706753093, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"automl.featurization\", \"training_percent\": null, \"start_time\": \"2024-02-01T02:04:53.423207Z\", \"end_time\": \"2024-02-01T02:08:37.408454Z\", \"created_time\": \"2024-02-01T02:04:53.063057Z\", \"created_time_dt\": \"2024-02-01T02:04:53.063057Z\", \"duration\": \"0:03:44\", \"iteration\": null, \"goal\": null, \"run_name\": \"Completed\", \"run_properties\": null}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_0\", \"run_number\": 1706753319, \"metric\": null, \"status\": \"Completed\", \"run_type\": null, \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:09:19.904594Z\", \"end_time\": \"2024-02-01T02:09:35.017172Z\", \"created_time\": \"2024-02-01T02:08:39.027742Z\", \"created_time_dt\": \"2024-02-01T02:08:39.027742Z\", \"duration\": \"0:00:55\", \"iteration\": \"0\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.80559003, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_2\", \"run_number\": 1706753320, \"metric\": null, \"status\": \"Completed\", \"run_type\": null, \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:09:54.111184Z\", \"end_time\": \"2024-02-01T02:10:08.460509Z\", \"created_time\": \"2024-02-01T02:08:40.102612Z\", \"created_time_dt\": \"2024-02-01T02:08:40.102612Z\", \"duration\": \"0:01:28\", \"iteration\": \"2\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.73553317, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_worker_0\", \"run_number\": 1706753321, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2024-02-01T02:09:08.484096Z\", \"end_time\": \"2024-02-01T02:10:45.14388Z\", \"created_time\": \"2024-02-01T02:08:41.385989Z\", \"created_time_dt\": \"2024-02-01T02:08:41.385989Z\", \"duration\": \"0:02:03\", \"iteration\": null, \"goal\": null, \"run_name\": \"Completed\", \"run_properties\": null}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_6\", \"run_number\": 1706753322, \"metric\": null, \"status\": \"Completed\", \"run_type\": null, \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:09:38.607312Z\", \"end_time\": \"2024-02-01T02:09:51.915461Z\", \"created_time\": \"2024-02-01T02:08:42.147088Z\", \"created_time_dt\": \"2024-02-01T02:08:42.147088Z\", \"duration\": \"0:01:09\", \"iteration\": \"6\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"copy=True, with_mean=False, with_std=False\", \"primary_metric\": 0.78856399, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_worker_1\", \"run_number\": 1706753323, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2024-02-01T02:09:12.56184Z\", \"end_time\": \"2024-02-01T02:10:42.452179Z\", \"created_time\": \"2024-02-01T02:08:43.838106Z\", \"created_time_dt\": \"2024-02-01T02:08:43.838106Z\", \"duration\": \"0:01:58\", \"iteration\": null, \"goal\": null, \"run_name\": \"Completed\", \"run_properties\": null}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_10\", \"run_number\": 1706753324, \"metric\": null, \"status\": \"Completed\", \"run_type\": null, \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:09:20.494379Z\", \"end_time\": \"2024-02-01T02:09:34.712006Z\", \"created_time\": \"2024-02-01T02:08:44.04146Z\", \"created_time_dt\": \"2024-02-01T02:08:44.04146Z\", \"duration\": \"0:00:50\", \"iteration\": \"10\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, LightGBM\", \"run_properties\": \"copy=True, norm='l1'\", \"primary_metric\": 0.78350261, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_12\", \"run_number\": 1706753325, \"metric\": null, \"status\": \"Completed\", \"run_type\": null, \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:09:48.51564Z\", \"end_time\": \"2024-02-01T02:10:02.437822Z\", \"created_time\": \"2024-02-01T02:08:44.993977Z\", \"created_time_dt\": \"2024-02-01T02:08:44.993977Z\", \"duration\": \"0:01:17\", \"iteration\": \"12\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, LogisticRegression\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.79477472, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_worker_2\", \"run_number\": 1706753326, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2024-02-01T02:09:08.396067Z\", \"end_time\": \"2024-02-01T02:10:39.384249Z\", \"created_time\": \"2024-02-01T02:08:46.230868Z\", \"created_time_dt\": \"2024-02-01T02:08:46.230868Z\", \"duration\": \"0:01:53\", \"iteration\": null, \"goal\": null, \"run_name\": \"Completed\", \"run_properties\": null}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_17\", \"run_number\": 1706753327, \"metric\": null, \"status\": \"Completed\", \"run_type\": null, \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:11:57.142274Z\", \"end_time\": \"2024-02-01T02:12:10.797392Z\", \"created_time\": \"2024-02-01T02:08:47.408175Z\", \"created_time_dt\": \"2024-02-01T02:08:47.408175Z\", \"duration\": \"0:03:23\", \"iteration\": \"17\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, RandomForest\", \"run_properties\": \"copy=True, with_mean=False, with_std=False\", \"primary_metric\": 0.76440675, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_worker_3\", \"run_number\": 1706753328, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2024-02-01T02:09:08.078828Z\", \"end_time\": \"2024-02-01T02:13:09.148771Z\", \"created_time\": \"2024-02-01T02:08:48.593131Z\", \"created_time_dt\": \"2024-02-01T02:08:48.593131Z\", \"duration\": \"0:04:20\", \"iteration\": null, \"goal\": null, \"run_name\": \"Completed\", \"run_properties\": null}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_20\", \"run_number\": 1706753520, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:12:25.023511Z\", \"end_time\": \"2024-02-01T02:13:40.871311Z\", \"created_time\": \"2024-02-01T02:12:00.560544Z\", \"created_time_dt\": \"2024-02-01T02:12:00.560544Z\", \"duration\": \"0:01:40\", \"iteration\": \"20\", \"goal\": \"accuracy_max\", \"run_name\": \"TruncatedSVDWrapper, RandomForest\", \"run_properties\": \"n_components=0.7026315789473684, random_state=None\", \"primary_metric\": 0.78545928, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_23\", \"run_number\": 1706753581, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:13:24.475578Z\", \"end_time\": \"2024-02-01T02:13:57.785032Z\", \"created_time\": \"2024-02-01T02:13:01.066974Z\", \"created_time_dt\": \"2024-02-01T02:13:01.066974Z\", \"duration\": \"0:00:56\", \"iteration\": \"23\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, LogisticRegression\", \"run_properties\": \"copy=True, with_mean=False, with_std=True\", \"primary_metric\": 0.79465977, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_24\", \"run_number\": 1706753592, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:13:35.111957Z\", \"end_time\": \"2024-02-01T02:14:10.379033Z\", \"created_time\": \"2024-02-01T02:13:12.055335Z\", \"created_time_dt\": \"2024-02-01T02:13:12.055335Z\", \"duration\": \"0:00:58\", \"iteration\": \"24\", \"goal\": \"accuracy_max\", \"run_name\": \"TruncatedSVDWrapper, XGBoostClassifier\", \"run_properties\": \"n_components=0.01, random_state=None\", \"primary_metric\": 0.73127718, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_26\", \"run_number\": 1706753622, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:14:03.555339Z\", \"end_time\": \"2024-02-01T02:15:03.497208Z\", \"created_time\": \"2024-02-01T02:13:42.397589Z\", \"created_time_dt\": \"2024-02-01T02:13:42.397589Z\", \"duration\": \"0:01:21\", \"iteration\": \"26\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='l1'\", \"primary_metric\": 0.79236152, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_27\", \"run_number\": 1706753639, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:14:23.034978Z\", \"end_time\": \"2024-02-01T02:14:57.782114Z\", \"created_time\": \"2024-02-01T02:13:59.385728Z\", \"created_time_dt\": \"2024-02-01T02:13:59.385728Z\", \"duration\": \"0:00:58\", \"iteration\": \"27\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"copy=True, with_mean=False, with_std=False\", \"primary_metric\": 0.79350982, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_28\", \"run_number\": 1706753651, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:14:32.837159Z\", \"end_time\": \"2024-02-01T02:15:27.965629Z\", \"created_time\": \"2024-02-01T02:14:11.768438Z\", \"created_time_dt\": \"2024-02-01T02:14:11.768438Z\", \"duration\": \"0:01:16\", \"iteration\": \"28\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='l2'\", \"primary_metric\": 0.79776818, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_29\", \"run_number\": 1706753699, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:15:20.664862Z\", \"end_time\": \"2024-02-01T02:16:24.199266Z\", \"created_time\": \"2024-02-01T02:14:59.275938Z\", \"created_time_dt\": \"2024-02-01T02:14:59.275938Z\", \"duration\": \"0:01:24\", \"iteration\": \"29\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='l2'\", \"primary_metric\": 0.80478563, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_30\", \"run_number\": 1706753703, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:15:25.496246Z\", \"end_time\": \"2024-02-01T02:15:58.572711Z\", \"created_time\": \"2024-02-01T02:15:03.174689Z\", \"created_time_dt\": \"2024-02-01T02:15:03.174689Z\", \"duration\": \"0:00:55\", \"iteration\": \"30\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"copy=True, with_mean=False, with_std=False\", \"primary_metric\": 0.50362357, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_31\", \"run_number\": 1706753705, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:15:26.599829Z\", \"end_time\": \"2024-02-01T02:16:08.449232Z\", \"created_time\": \"2024-02-01T02:15:05.383966Z\", \"created_time_dt\": \"2024-02-01T02:15:05.383966Z\", \"duration\": \"0:01:03\", \"iteration\": \"31\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='l2'\", \"primary_metric\": 0.8035202, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_32\", \"run_number\": 1706753729, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:15:53.922866Z\", \"end_time\": \"2024-02-01T02:16:55.469469Z\", \"created_time\": \"2024-02-01T02:15:29.443823Z\", \"created_time_dt\": \"2024-02-01T02:15:29.443823Z\", \"duration\": \"0:01:26\", \"iteration\": \"32\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"copy=True, with_mean=False, with_std=False\", \"primary_metric\": 0.78338886, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_33\", \"run_number\": 1706753760, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:16:22.583903Z\", \"end_time\": \"2024-02-01T02:16:55.703Z\", \"created_time\": \"2024-02-01T02:16:00.149704Z\", \"created_time_dt\": \"2024-02-01T02:16:00.149704Z\", \"duration\": \"0:00:55\", \"iteration\": \"33\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.77936151, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_34\", \"run_number\": 1706753770, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:16:31.274075Z\", \"end_time\": \"2024-02-01T02:17:01.869853Z\", \"created_time\": \"2024-02-01T02:16:10.46868Z\", \"created_time_dt\": \"2024-02-01T02:16:10.46868Z\", \"duration\": \"0:00:51\", \"iteration\": \"34\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='l1'\", \"primary_metric\": 0.80202383, \"best_metric\": 0.80559003}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_35\", \"run_number\": 1706753786, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:16:46.827697Z\", \"end_time\": \"2024-02-01T02:17:02.022365Z\", \"created_time\": \"2024-02-01T02:16:26.961404Z\", \"created_time_dt\": \"2024-02-01T02:16:26.961404Z\", \"duration\": \"0:00:35\", \"iteration\": \"35\", \"goal\": null, \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": null}, {\"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_37\", \"run_number\": 1706753822, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2024-02-01T02:17:27.241744Z\", \"end_time\": \"2024-02-01T02:18:45.895628Z\", \"created_time\": \"2024-02-01T02:17:02.676631Z\", \"created_time_dt\": \"2024-02-01T02:17:02.676631Z\", \"duration\": \"0:01:43\", \"iteration\": \"37\", \"goal\": \"accuracy_max\", \"run_name\": \"StackEnsemble\", \"run_properties\": \"base_learners=[('18', Pipeline(memory=None, steps=[('standardscalerwrapper', StandardScalerWrapper(copy=True, with_mean=False, with_std=False\", \"primary_metric\": 0.80915596, \"best_metric\": 0.80915596}], \"children_metrics\": {\"categories\": [0], \"series\": {\"AUC_micro\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"AUC_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9008621822365243, 0.8100037549912443, 0.8811117291495828, 0.8738416089321046, 0.8831836469875093, 0.8614577975134555, 0.8782603378567991, 0.8831196866789671, 0.8073970880237382, 0.8906586224029693, 0.8791428617159674, 0.8916327871557321, 0.8952528564289602, 0.5036235657835443, 0.8955787600170565, 0.8763349368521443, 0.8579987869531092, 0.8969395822934125, 0.9030026678840726]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"AUC_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9008621822365243, 0.9030026678840726]}], \"precision_score_macro\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"precision_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8056305160088619, 0.7450827988051472, 0.788815346542397, 0.7835653627719206, 0.795131155254014, 0.7703948197286792, 0.7855895636594172, 0.7950695159329584, 0.7341600568213495, 0.7925557946102169, 0.7938397276455051, 0.7980236924656265, 0.8050420347037648, 0.25181178289177214, 0.8036763530347724, 0.783661097947766, 0.7796244558569837, 0.8022974991134291, 0.8094274787343941]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"precision_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8056305160088619, 0.8094274787343941]}], \"log_loss\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"log_loss\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.3933646238491386, 0.5654405565343371, 0.43206185257210733, 0.4677009376580895, 0.4273505990271703, 0.49006439259302503, 0.4569892349885734, 0.4275591266672663, 0.5310358539294118, 0.502743627945996, 0.6170578820320738, 0.4489228028181224, 0.47477272027172657, 0.6931477825717399, 0.40863114277884094, 0.5948991734767344, 0.4794313045011959, 0.420434500492075, 0.5200675752069693]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"log_loss_min\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386, 0.3933646238491386]}], \"recall_score_macro\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"recall_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8055942603187676, 0.7362605648411255, 0.7886117108077197, 0.7835558389288467, 0.79464654588181, 0.7648730455403744, 0.7854337063382499, 0.7945162311123957, 0.7316831697318393, 0.7923862016740791, 0.7934155143884645, 0.7978376902313636, 0.8048292421998496, 0.5, 0.8036028682258524, 0.7834463225409027, 0.7793893196102063, 0.8020557632283497, 0.8089902629763828]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"recall_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8089902629763828]}], \"average_precision_score_weighted\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"average_precision_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8996346336413706, 0.796489037578082, 0.8761404207568673, 0.8679059189459313, 0.8853654091623941, 0.8565346136790009, 0.8735077080010989, 0.8852921331690924, 0.7902339523814094, 0.8908401859378673, 0.870804094708473, 0.8903270006527174, 0.8936896962731609, 0.5000736570675869, 0.893970281931546, 0.8753286081663365, 0.8463198603222395, 0.8958017509226656, 0.9018622598712869]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"average_precision_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.8996346336413706, 0.9018622598712869]}], \"norm_macro_recall\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"norm_macro_recall\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.6111885206375351, 0.47252112968225085, 0.5772234216154393, 0.5671116778576933, 0.5892930917636201, 0.5297460910807488, 0.5708674126764997, 0.5890324622247913, 0.4633663394636788, 0.5847724033481583, 0.5868310287769292, 0.595675380462727, 0.6096584843996993, 0.0, 0.6072057364517047, 0.5668926450818057, 0.5587786392204126, 0.6041115264566994, 0.6179805259527654]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"norm_macro_recall_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6111885206375351, 0.6179805259527654]}], \"accuracy\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8055900279977845, 0.735533165562791, 0.788563986948043, 0.7835026148249957, 0.7947747174248655, 0.7644067493784704, 0.7854592834393535, 0.7946597749721909, 0.7312771846841333, 0.7923615214754455, 0.793509821061666, 0.7977681841673223, 0.8047856293479778, 0.5036235657835443, 0.8035202036010007, 0.7833888634858202, 0.7793615102260402, 0.8020238341811193, 0.8091559571225609]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8091559571225609]}], \"balanced_accuracy\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"balanced_accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8055942603187676, 0.7362605648411255, 0.7886117108077197, 0.7835558389288467, 0.79464654588181, 0.7648730455403744, 0.7854337063382499, 0.7945162311123957, 0.7316831697318393, 0.7923862016740791, 0.7934155143884645, 0.7978376902313636, 0.8048292421998496, 0.5, 0.8036028682258524, 0.7834463225409027, 0.7793893196102063, 0.8020557632283497, 0.8089902629763828]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"balanced_accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8055942603187676, 0.8089902629763828]}], \"f1_score_micro\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"f1_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8055900279977845, 0.735533165562791, 0.788563986948043, 0.7835026148249956, 0.7947747174248655, 0.7644067493784704, 0.7854592834393535, 0.7946597749721909, 0.7312771846841332, 0.7923615214754455, 0.793509821061666, 0.7977681841673223, 0.8047856293479778, 0.5036235657835443, 0.8035202036010007, 0.7833888634858202, 0.7793615102260402, 0.8020238341811193, 0.8091559571225609]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"f1_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8091559571225609]}], \"recall_score_micro\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"recall_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8055900279977845, 0.735533165562791, 0.788563986948043, 0.7835026148249957, 0.7947747174248655, 0.7644067493784704, 0.7854592834393535, 0.7946597749721909, 0.7312771846841333, 0.7923615214754455, 0.793509821061666, 0.7977681841673223, 0.8047856293479778, 0.5036235657835443, 0.8035202036010007, 0.7833888634858202, 0.7793615102260402, 0.8020238341811193, 0.8091559571225609]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"recall_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8091559571225609]}], \"AUC_weighted\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"AUC_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8980143373187788, 0.8035683719102185, 0.8778326368362425, 0.8706338693300146, 0.8834514958147734, 0.8618718442102711, 0.8762963476077598, 0.8834496579888796, 0.8018887510722228, 0.8893649846230385, 0.875108637359286, 0.8900633969210116, 0.8933607369970211, 0.5, 0.8933524671284034, 0.8749051703061476, 0.85534043898454, 0.8948581262039067, 0.9005831374068028]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"AUC_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.9005831374068028]}], \"weighted_accuracy\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"weighted_accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8055857752505003, 0.7348063712449415, 0.7885162592273974, 0.7834494350200508, 0.7949027420402069, 0.7639408170924602, 0.7854848091841335, 0.7948031610990164, 0.7308715296080994, 0.7923368177472909, 0.793603997517905, 0.7976986964897614, 0.8047420245383442, 0.507244219440419, 0.8034375951706012, 0.7833314179890218, 0.779333717053204, 0.8019918876592913, 0.8093214701964382]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"weighted_accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8055857752505003, 0.8093214701964382]}], \"f1_score_macro\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"f1_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8055636176246347, 0.7333176503887231, 0.7885119520174402, 0.7834872728618967, 0.7946492184309474, 0.7632461200756054, 0.7853987944588867, 0.794518025889177, 0.730638541644525, 0.7923127200518378, 0.79339928880071, 0.7977258219751219, 0.8047365036751108, 0.33493296626298136, 0.803500255296871, 0.7833338557835731, 0.7792946140894982, 0.8019671296567685, 0.8090407996688611]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"f1_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8055636176246347, 0.8090407996688611]}], \"f1_score_weighted\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"f1_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8055841328767788, 0.7331595504138455, 0.7885237642808921, 0.7835007258443611, 0.7946966610916867, 0.7631665371135476, 0.785428726702122, 0.7945691912501095, 0.7305622999554648, 0.7923301477950841, 0.7934399928814588, 0.7977347272970665, 0.8047502213003174, 0.3373811990411256, 0.8035067580853766, 0.7833450338755212, 0.7793130929464267, 0.8019823890063597, 0.8090934440200362]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"f1_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8055841328767788, 0.8090934440200362]}], \"average_precision_score_micro\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"average_precision_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9042626186288091, 0.8137333085693463, 0.8831534017045675, 0.874767319382376, 0.8846507376661034, 0.8640983907914634, 0.8798244124747248, 0.884481146796958, 0.8074211075480633, 0.8935418367858047, 0.8792238728222561, 0.8937428126574218, 0.8973954499705036, 0.5018486114255656, 0.8985403457161818, 0.8780127999959376, 0.8554294360168229, 0.8996165930566777, 0.9058417833783358]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"average_precision_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9042626186288091, 0.9058417833783358]}], \"precision_score_micro\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"precision_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8055900279977845, 0.735533165562791, 0.788563986948043, 0.7835026148249957, 0.7947747174248655, 0.7644067493784704, 0.7854592834393535, 0.7946597749721909, 0.7312771846841333, 0.7923615214754455, 0.793509821061666, 0.7977681841673223, 0.8047856293479778, 0.5036235657835443, 0.8035202036010007, 0.7833888634858202, 0.7793615102260402, 0.8020238341811193, 0.8091559571225609]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"precision_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8091559571225609]}], \"average_precision_score_macro\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"average_precision_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8995283541735963, 0.7961648999017348, 0.8759912375198293, 0.8677966615816872, 0.8852998908657712, 0.8563793330005378, 0.8733870649314724, 0.8852269092899399, 0.7900275953115803, 0.8907394975269846, 0.8706542375119891, 0.8902260167385199, 0.8936020341003872, 0.5, 0.8938600810278196, 0.8752000913807599, 0.8461412658408293, 0.8957179257202947, 0.9017652162516565]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"average_precision_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.8995283541735963, 0.9017652162516565]}], \"recall_score_weighted\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"recall_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8055900279977845, 0.735533165562791, 0.788563986948043, 0.7835026148249957, 0.7947747174248655, 0.7644067493784704, 0.7854592834393535, 0.7946597749721909, 0.7312771846841333, 0.7923615214754455, 0.793509821061666, 0.7977681841673223, 0.8047856293479778, 0.5036235657835443, 0.8035202036010007, 0.7833888634858202, 0.7793615102260402, 0.8020238341811193, 0.8091559571225609]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"recall_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8055900279977845, 0.8091559571225609]}], \"precision_score_weighted\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"precision_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8056757836442197, 0.7455122980953997, 0.7888867904159291, 0.7836454780096138, 0.7950975377313944, 0.7707065681056372, 0.7856238528106813, 0.7950279038119249, 0.7344163137738076, 0.7926153753190543, 0.7938265257949537, 0.7981110908931472, 0.8051131046996624, 0.2536603943173377, 0.8037720201160381, 0.7837409814333497, 0.7796891767744164, 0.80236001504476, 0.8093663787528916]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"precision_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8056757836442197, 0.8093663787528916]}], \"AUC_macro\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"AUC_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8980143373187788, 0.8035683719102185, 0.8778326368362425, 0.8706338693300146, 0.8834514958147736, 0.8618718442102711, 0.8762963476077598, 0.8834496579888796, 0.8018887510722228, 0.8893649846230385, 0.875108637359286, 0.8900633969210116, 0.8933607369970211, 0.5, 0.8933524671284034, 0.8749051703061476, 0.85534043898454, 0.8948581262039067, 0.9005831374068028]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"AUC_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.8980143373187788, 0.9005831374068028]}], \"matthews_correlation\": [{\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"markers\", \"name\": \"matthews_correlation\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.6112247750760503, 0.48125958069069685, 0.5774269841822617, 0.5671211887094324, 0.5897773162054313, 0.5352355400092133, 0.5710232331978451, 0.5895852734088036, 0.4658366273774856, 0.5849419625483108, 0.5872549355180163, 0.5958613098623223, 0.609871211865684, 0.0, 0.6072792002790132, 0.5671073355955318, 0.5590136054633887, 0.6043531985343351, 0.6184170444726302]}, {\"categories\": [\"0\", \"2\", \"6\", \"10\", \"12\", \"17\", \"20\", \"23\", \"24\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"37\"], \"mode\": \"lines\", \"name\": \"matthews_correlation_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6112247750760503, 0.6184170444726302]}]}, \"metricName\": null, \"primaryMetricName\": \"accuracy\", \"showLegend\": false}, \"run_metrics\": [{\"name\": \"experiment_status\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], \"series\": [{\"data\": [\"DatasetEvaluation\", \"FeaturesGeneration\", \"DatasetFeaturization\", \"DatasetFeaturizationCompleted\", \"DatasetCrossValidationSplit\", \"ModelSelection\", \"BestRunExplainModel\", \"ModelExplanationDataSetSetup\", \"PickSurrogateModel\", \"EngineeredFeatureExplanations\", \"EngineeredFeatureExplanations\", \"RawFeaturesExplanations\", \"RawFeaturesExplanations\", \"BestRunExplainModel\"]}]}, {\"name\": \"experiment_status_description\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], \"series\": [{\"data\": [\"Gathering dataset statistics.\", \"Generating features for the dataset.\", \"Beginning to fit featurizers and featurize the dataset.\", \"Completed fit featurizers and featurizing the dataset.\", \"Generating individually featurized CV splits.\", \"Beginning model selection.\", \"Best run model explanations started\", \"Model explanations data setup completed\", \"Choosing LightGBM as the surrogate model for explanations\", \"Computation of engineered features started\", \"Computation of engineered features completed\", \"Computation of raw features started\", \"Computation of raw features completed\", \"Best run model explanations completed\"]}]}, {\"name\": \"accuracy\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8115716014719517]}]}, {\"name\": \"AUC_micro\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.9020747095634671]}]}, {\"name\": \"norm_macro_recall\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.6230779509196316]}]}, {\"name\": \"precision_score_micro\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8115716014719517]}]}, {\"name\": \"f1_score_macro\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8115292290992873]}]}, {\"name\": \"precision_score_macro\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8116430852921802]}]}, {\"name\": \"AUC_macro\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8999161008789696]}]}, {\"name\": \"average_precision_score_weighted\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.9011573374563951]}]}, {\"name\": \"recall_score_weighted\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8115716014719517]}]}, {\"name\": \"matthews_correlation\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.6231820430023602]}]}, {\"name\": \"f1_score_micro\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8115716014719515]}]}, {\"name\": \"weighted_accuracy\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8116041725138953]}]}, {\"name\": \"recall_score_micro\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8115716014719517]}]}, {\"name\": \"AUC_weighted\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8999161008789696]}]}, {\"name\": \"balanced_accuracy\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8115389754598159]}]}, {\"name\": \"f1_score_weighted\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8115565663088772]}]}, {\"name\": \"recall_score_macro\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8115389754598159]}]}, {\"name\": \"average_precision_score_micro\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.9047032724388469]}]}, {\"name\": \"average_precision_score_macro\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.9010612370473703]}]}, {\"name\": \"log_loss\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.4652249570658661]}]}, {\"name\": \"precision_score_weighted\", \"run_id\": \"AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400\", \"categories\": [0], \"series\": [{\"data\": [0.8116651090946579]}]}], \"run_logs\": \"\\nRun is completed.\", \"graph\": {}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.51.0\"}, \"loading\": false}"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 18,
          "data": {
            "text/plain": "{'runId': 'AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400',\n 'target': 'my-cluster',\n 'status': 'Completed',\n 'startTimeUtc': '2024-02-01T02:01:10.600385Z',\n 'endTimeUtc': '2024-02-01T02:18:49.756513Z',\n 'services': {},\n 'warnings': [{'source': 'JasmineService',\n   'message': 'No scores improved over last 10 iterations, so experiment stopped early. This early stopping behavior can be disabled by setting enable_early_stopping = False in AutoMLConfig for notebook/python SDK runs.'}],\n 'properties': {'num_iterations': '1000',\n  'training_type': 'TrainFull',\n  'acquisition_function': 'EI',\n  'primary_metric': 'accuracy',\n  'train_split': '0',\n  'acquisition_parameter': '0',\n  'num_cross_validation': '5',\n  'target': 'my-cluster',\n  'AMLSettingsJsonString': '{\"path\":null,\"name\":\"automl-experiment\",\"subscription_id\":\"f9d5a085-54dc-4215-9ba6-dad5d86e60a0\",\"resource_group\":\"aml-quickstarts-251237\",\"workspace_name\":\"quick-starts-ws-251237\",\"region\":\"westus2\",\"compute_target\":\"my-cluster\",\"spark_service\":null,\"azure_service\":\"remote\",\"many_models\":false,\"pipeline_fetch_max_batch_size\":1,\"enable_batch_run\":true,\"enable_parallel_run\":false,\"num_procs\":null,\"enable_run_restructure\":false,\"start_auxiliary_runs_before_parent_complete\":false,\"enable_code_generation\":true,\"iterations\":1000,\"primary_metric\":\"accuracy\",\"task_type\":\"classification\",\"positive_label\":null,\"data_script\":null,\"test_size\":0.0,\"test_include_predictions_only\":false,\"validation_size\":0.0,\"n_cross_validations\":5,\"y_min\":null,\"y_max\":null,\"num_classes\":null,\"featurization\":\"auto\",\"_ignore_package_version_incompatibilities\":false,\"is_timeseries\":false,\"max_cores_per_iteration\":1,\"max_concurrent_iterations\":4,\"iteration_timeout_minutes\":null,\"mem_in_mb\":null,\"enforce_time_on_windows\":false,\"experiment_timeout_minutes\":20,\"experiment_exit_score\":null,\"partition_column_names\":null,\"whitelist_models\":null,\"blacklist_algos\":[\"TensorFlowLinearClassifier\",\"TensorFlowDNN\"],\"supported_models\":[\"SVM\",\"DecisionTree\",\"LogisticRegression\",\"XGBoostClassifier\",\"BernoulliNaiveBayes\",\"ExtremeRandomTrees\",\"AveragedPerceptronClassifier\",\"TensorFlowDNN\",\"TensorFlowLinearClassifier\",\"LinearSVM\",\"GradientBoosting\",\"TabnetClassifier\",\"KNN\",\"LightGBM\",\"MultinomialNaiveBayes\",\"RandomForest\",\"SGD\"],\"private_models\":[],\"auto_blacklist\":true,\"blacklist_samples_reached\":false,\"exclude_nan_labels\":true,\"verbosity\":20,\"_debug_log\":\"azureml_automl.log\",\"show_warnings\":false,\"model_explainability\":true,\"service_url\":null,\"sdk_url\":null,\"sdk_packages\":null,\"enable_onnx_compatible_models\":false,\"enable_split_onnx_featurizer_estimator_models\":false,\"vm_type\":\"STANDARD_D2_V2\",\"telemetry_verbosity\":20,\"send_telemetry\":true,\"enable_dnn\":false,\"scenario\":\"AutoML\",\"environment_label\":null,\"save_mlflow\":false,\"enable_categorical_indicators\":false,\"force_text_dnn\":false,\"enable_feature_sweeping\":true,\"enable_early_stopping\":true,\"early_stopping_n_iters\":10,\"arguments\":null,\"dataset_id\":\"9e16fe1e-598a-446e-a385-f0c5a7236c50\",\"hyperdrive_config\":null,\"validation_dataset_id\":null,\"run_source\":null,\"metrics\":null,\"enable_metric_confidence\":false,\"enable_ensembling\":true,\"enable_stack_ensembling\":true,\"ensemble_iterations\":15,\"enable_tf\":false,\"enable_subsampling\":null,\"subsample_seed\":null,\"enable_nimbusml\":false,\"enable_streaming\":false,\"force_streaming\":false,\"track_child_runs\":true,\"n_best_runs\":1,\"allowed_private_models\":[],\"label_column_name\":\"Transported\",\"weight_column_name\":null,\"cv_split_column_names\":null,\"enable_local_managed\":false,\"_local_managed_run_id\":null,\"cost_mode\":1,\"lag_length\":0,\"metric_operation\":\"maximize\",\"preprocess\":true}',\n  'DataPrepJsonString': '{\\\\\"training_data\\\\\": {\\\\\"datasetId\\\\\": \\\\\"9e16fe1e-598a-446e-a385-f0c5a7236c50\\\\\"}, \\\\\"datasets\\\\\": 0}',\n  'EnableSubsampling': None,\n  'runTemplate': 'AutoML',\n  'azureml.runsource': 'automl',\n  'display_task_type': 'classification',\n  'dependencies_versions': '{\"azureml-dataprep-native\": \"38.0.0\", \"azureml-dataprep\": \"4.10.8\", \"azureml-dataprep-rslex\": \"2.17.12\", \"azureml-train-automl-runtime\": \"1.51.0.post2\", \"azureml-train-automl-client\": \"1.51.0.post1\", \"azureml-training-tabular\": \"1.51.0.post1\", \"azureml-automl-runtime\": \"1.51.0.post1\", \"azureml-automl-core\": \"1.51.0.post1\", \"azureml-mlflow\": \"1.51.0\", \"azureml-datadrift\": \"1.51.0\", \"azureml-pipeline\": \"1.51.0\", \"azureml-contrib-dataset\": \"1.51.0\", \"azureml-contrib-notebook\": \"1.51.0\", \"azureml-accel-models\": \"1.51.0\", \"azureml-automl-dnn-nlp\": \"1.51.0\", \"azureml-pipeline-core\": \"1.51.0\", \"azureml-responsibleai\": \"1.51.0\", \"azureml-contrib-automl-pipeline-steps\": \"1.51.0\", \"azureml-pipeline-steps\": \"1.51.0\", \"azureml-core\": \"1.51.0\", \"azureml-contrib-reinforcementlearning\": \"1.51.0\", \"azureml-contrib-server\": \"1.51.0\", \"azureml-opendatasets\": \"1.51.0\", \"azureml-contrib-services\": \"1.51.0\", \"azureml-telemetry\": \"1.51.0\", \"azureml-train-restclients-hyperdrive\": \"1.51.0\", \"azureml-interpret\": \"1.51.0\", \"azureml-train-core\": \"1.51.0\", \"azureml-tensorboard\": \"1.51.0\", \"azureml-train\": \"1.51.0\", \"azureml-contrib-pipeline-steps\": \"1.51.0\", \"azureml-explain-model\": \"1.51.0\", \"azureml-cli-common\": \"1.51.0\", \"azureml-widgets\": \"1.51.0\", \"azureml-train-automl\": \"1.51.0\", \"azureml-defaults\": \"1.51.0\", \"azureml-contrib-fairness\": \"1.51.0\", \"azureml-sdk\": \"1.51.0\", \"azureml-dataset-runtime\": \"1.51.0\", \"azureml-inference-server-http\": \"0.8.4\"}',\n  '_aml_system_scenario_identification': 'Remote.Parent',\n  'ClientType': 'SDK',\n  'PlatformVersion': 'DPV1',\n  'environment_cpu_name': 'AzureML-AutoML',\n  'environment_cpu_label': 'scikit-upgrade2',\n  'environment_gpu_name': 'AzureML-AutoML-GPU',\n  'environment_gpu_label': 'scikit-upgrade2',\n  'root_attribution': 'automl',\n  'attribution': 'AutoML',\n  'Orchestrator': 'AutoML',\n  'CancelUri': 'https://westus2.api.azureml.ms/jasmine/v1.0/subscriptions/f9d5a085-54dc-4215-9ba6-dad5d86e60a0/resourceGroups/aml-quickstarts-251237/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-251237/experimentids/b27e4690-6f70-4c91-9b6d-e07efc0defd7/cancel/AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400',\n  'ClientSdkVersion': None,\n  'snapshotId': '00000000-0000-0000-0000-000000000000',\n  'SetupRunId': 'AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_setup',\n  'SetupRunContainerId': 'dcid.AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_setup',\n  'FeaturizationRunJsonPath': 'featurizer_container.json',\n  'FeaturizationRunId': 'AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_featurize',\n  'ProblemInfoJsonString': '{\"dataset_num_categorical\": 0, \"is_sparse\": true, \"subsampling\": false, \"has_extra_col\": true, \"dataset_classes\": 2, \"dataset_features\": 59, \"dataset_samples\": 8693, \"single_frequency_class_detected\": false}',\n  'ModelExplainRunId': 'AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_ModelExplain'},\n 'inputDatasets': [{'dataset': {'id': '9e16fe1e-598a-446e-a385-f0c5a7236c50'}, 'consumptionDetails': {'type': 'RunInput', 'inputName': 'training_data', 'mechanism': 'Direct'}}],\n 'outputDatasets': [],\n 'logFiles': {},\n 'submittedBy': 'ODL_User 251237'}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 18,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1706753934053
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Best Model\n",
        "\n",
        "TODO: In the cell below, get the best model from the automl experiments and display all the properties of the model.\n",
        "\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "best_run, best_model = automl_run.get_output()\n",
        "best_metrics = best_run.get_metrics()\n",
        "print(best_run)\n",
        "print(best_metrics)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "WARNING:root:The version of the SDK does not match the version the model was trained on.\nWARNING:root:The consistency in the result may not be guaranteed.\nWARNING:root:Package:azureml-automl-core, training version:1.52.0.post1, current version:1.51.0.post1\nPackage:azureml-automl-runtime, training version:1.52.0.post1, current version:1.51.0.post1\nPackage:azureml-core, training version:1.52.0, current version:1.51.0\nPackage:azureml-dataprep, training version:4.11.4, current version:4.10.8\nPackage:azureml-dataprep-rslex, training version:2.18.4, current version:2.17.12\nPackage:azureml-dataset-runtime, training version:1.52.0, current version:1.51.0\nPackage:azureml-defaults, training version:1.52.0, current version:1.51.0\nPackage:azureml-interpret, training version:1.52.0, current version:1.51.0\nPackage:azureml-mlflow, training version:1.52.0, current version:1.51.0\nPackage:azureml-pipeline-core, training version:1.52.0, current version:1.51.0\nPackage:azureml-responsibleai, training version:1.52.0, current version:1.51.0\nPackage:azureml-telemetry, training version:1.52.0, current version:1.51.0\nPackage:azureml-train-automl-client, training version:1.52.0, current version:1.51.0.post1\nPackage:azureml-train-automl-runtime, training version:1.52.0, current version:1.51.0.post2\nPackage:azureml-train-core, training version:1.52.0, current version:1.51.0\nPackage:azureml-train-restclients-hyperdrive, training version:1.52.0, current version:1.51.0\nPackage:azureml-training-tabular, training version:1.52.0, current version:1.51.0.post1\nWARNING:root:Please ensure the version of your local conda dependencies match the version on which your model was trained in order to properly retrieve your model.\n"
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Run(Experiment: automl-experiment,\nId: AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_36,\nType: azureml.scriptrun,\nStatus: Completed)\n{'log_loss': 0.4652249570658661, 'f1_score_weighted': 0.8115565663088772, 'recall_score_micro': 0.8115716014719517, 'precision_score_weighted': 0.8116651090946579, 'average_precision_score_macro': 0.9010612370473703, 'f1_score_micro': 0.8115716014719515, 'precision_score_macro': 0.8116430852921802, 'average_precision_score_micro': 0.9047032724388469, 'precision_score_micro': 0.8115716014719517, 'matthews_correlation': 0.6231820430023602, 'accuracy': 0.8115716014719517, 'f1_score_macro': 0.8115292290992873, 'weighted_accuracy': 0.8116041725138953, 'AUC_macro': 0.8999161008789696, 'average_precision_score_weighted': 0.9011573374563951, 'AUC_weighted': 0.8999161008789696, 'balanced_accuracy': 0.8115389754598159, 'norm_macro_recall': 0.6230779509196316, 'recall_score_macro': 0.8115389754598159, 'AUC_micro': 0.9020747095634671, 'recall_score_weighted': 0.8115716014719517, 'confusion_matrix': 'aml://artifactId/ExperimentRun/dcid.AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_36/confusion_matrix', 'accuracy_table': 'aml://artifactId/ExperimentRun/dcid.AutoML_8bab294e-51b5-4cc6-88b4-d6c7c64d8400_36/accuracy_table'}\n"
        }
      ],
      "execution_count": 19,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1706753938215
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_model"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 24,
          "data": {
            "text/plain": "PipelineWithYTransformations(Pipeline={'memory': None,\n                                       'steps': [('datatransformer',\n                                                  DataTransformer(enable_dnn=False, enable_feature_sweeping=True, feature_sweeping_config={}, feature_sweeping_timeout=86400, featurization_config=None, force_text_dnn=False, is_cross_validation=True, is_onnx_compatible=False, observer=None, task='classification', working_dir='/mn...\n                                                  PreFittedSoftVotingClassifier(classification_labels=array([0, 1]), estimators=[('18', Pipeline(memory=None, steps=[('standardscalerwrapper', StandardScalerWrapper(copy=True, with_mean=False, with_std=False)), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bytree=0.7, eta=0.1, gamma=0.1, max_depth=9, max_leaves=511, n_estimators=25, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0, reg_lambda=1.7708333333333335, subsample=0.9, tree_method='auto'))], verbose=False)), ('0', Pipeline(memory=None, steps=[('maxabsscaler', MaxAbsScaler(copy=True)), ('lightgbmclassifier', LightGBMClassifier(min_data_in_leaf=20, n_jobs=1, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None))], verbose=False)), ('29', Pipeline(memory=None, steps=[('sparsenormalizer', Normalizer(copy=True, norm='l2')), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bytree=0.9, eta=0.01, gamma=0, max_depth=9, max_leaves=7, n_estimators=100, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=1.9791666666666667, reg_lambda=2.0833333333333335, subsample=1, tree_method='auto'))], verbose=False)), ('22', Pipeline(memory=None, steps=[('sparsenormalizer', Normalizer(copy=True, norm='l1')), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bylevel=1, colsample_bytree=1, eta=0.2, gamma=0, max_depth=10, max_leaves=0, n_estimators=10, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=1.3541666666666667, reg_lambda=1.4583333333333335, subsample=1, tree_method='auto'))], verbose=False)), ('4', Pipeline(memory=None, steps=[('maxabsscaler', MaxAbsScaler(copy=True)), ('lightgbmclassifier', LightGBMClassifier(boosting_type='gbdt', colsample_bytree=0.6933333333333332, learning_rate=0.09473736842105263, max_bin=110, max_depth=8, min_child_weight=6, min_data_in_leaf=0.003457931034482759, min_split_gain=1, n_estimators=25, n_jobs=1, num_leaves=227, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None, reg_alpha=0.9473684210526315, reg_lambda=0.42105263157894735, subsample=0.49526315789473685))], verbose=False)), ('30', Pipeline(memory=None, steps=[('standardscalerwrapper', StandardScalerWrapper(copy=True, with_mean=False, with_std=False)), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bytree=0.9, eta=0.3, gamma=5, max_depth=0, max_leaves=255, n_estimators=25, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=2.1875, reg_lambda=2.291666666666667, subsample=1, tree_method='auto'))], verbose=False)), ('27', Pipeline(memory=None, steps=[('standardscalerwrapper', StandardScalerWrapper(copy=True, with_mean=False, with_std=False)), ('xgboostclassifier', XGBoostClassifier(booster='gbtree', colsample_bytree=0.7, eta=0.01, gamma=10, max_depth=6, max_leaves=15, n_estimators=25, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0, reg_lambda=0.3125, subsample=0.5, tree_method='auto'))], verbose=False))], flatten_transform=None, weights=[0.125, 0.125, 0.25, 0.125, 0.125, 0.125, 0.125]))],\n                                       'verbose': False},\n                             y_transformer={},\n                             y_transformer_name='LabelEncoder')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 24,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1706754827121
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model Deployment\n",
        "\n",
        "Remember you have to deploy only one of the two models you trained but you still need to register both the models. Perform the steps in the rest of this notebook only if you wish to deploy this model.\n",
        "\n",
        "TODO: In the cell below, register the model, create an inference config and deploy the model as a web service."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "registered_model = automl_run.register_model(model_name='BestAutoMLmodel')"
      ],
      "outputs": [],
      "execution_count": 20,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1706753940418
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "script = './score.py'\n",
        "best_run.download_file('./outputs/scoring_file_v_1_0_0.py', script)"
      ],
      "outputs": [],
      "execution_count": 22,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1706753941041
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.model import InferenceConfig\n",
        "from  azureml.core.environment import Environment\n",
        "from azureml.core import Model\n",
        "from azureml.core.webservice import AciWebservice\n",
        "\n",
        "env = best_run.get_environment()    \n",
        "\n",
        "inference_config = InferenceConfig(entry_script=script,\n",
        "                                   environment=env)\n",
        "\n",
        "deployment_config =AciWebservice.deploy_configuration(cpu_cores = 1, \n",
        "                                               memory_gb = 1,\n",
        "                                               enable_app_insights=True,\n",
        "                                               auth_enabled=True,\n",
        "                                              )\n",
        "\n",
        "service = Model.deploy(ws, \"web-service-automl\", [registered_model], inference_config, deployment_config)\n",
        "service.wait_for_deployment(show_output = True)\n",
        "print(service.state)\n",
        "\n",
        "scoring_uri = service.scoring_uri\n",
        "print(scoring_uri)\n",
        "\n",
        "key, sec_key = service.get_keys()\n",
        "print(key)\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Tips: You can try get_logs(): https://aka.ms/debugimage#dockerlog or local deployment: https://aka.ms/debugimage#debug-locally to debug if deployment takes longer than 10 minutes.\nRunning\n2024-02-01 02:19:03+00:00 Creating Container Registry if not exists..\n2024-02-01 02:29:03+00:00 Registering the environment.\n2024-02-01 02:29:03+00:00 Use the existing image.\n2024-02-01 02:29:04+00:00 Submitting deployment to compute..\n2024-02-01 02:29:09+00:00 Checking the status of deployment web-service-automl..\n2024-02-01 02:33:06+00:00 Checking the status of inference endpoint web-service-automl.\nSucceeded\nACI service creation operation finished, operation \"Succeeded\"\nHealthy\nhttp://d1ddb3c1-cf85-4869-8ac2-954df8eb7cdc.westus2.azurecontainer.io/score\nVInpAwDABTtjDPRuYfl8nCoXr916JbvZ\n"
        }
      ],
      "execution_count": 23,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1706754826505
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Deployed from Studio\n",
        "\n"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: In the cell below, send a request to the web service you deployed to test it."
      ],
      "metadata": {
        "collapsed": true,
        "gather": {
          "logged": 1598431657736
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import json\n",
        "\n",
        "# URL for the web service, should be similar to:\n",
        "# 'http://8530a665-66f3-49c8-a953-b82a2d312917.eastus.azurecontainer.io/score'\n",
        "# scoring_uri = 'http://091674f3-7d52-4713-a563-29fdf9673dcd.westeurope.azurecontainer.io/score'\n",
        "# If the service is authenticated, set the key or token\n",
        "# key = '2cloAPK95e4LlPLSINN0HXiMNWGOcJb5'\n",
        "\n",
        "# Two sets of data to score, so we get two results back\n",
        "data = {\n",
        "    \"data\":\n",
        "            [\n",
        "              {\n",
        "        \"HomePlanet\": \"Europa\",\n",
        "        \"CryoSleep\": \"False\",\n",
        "        \"Destination\": \"TRAPPIST-1e\",\n",
        "        \"VIP\": \"False\",\n",
        "        \"RoomService\": 109.00,\n",
        "        \"FoodCourt\": 1000,\n",
        "        \"ShoppingMall\": 25.0,\n",
        "        \"Spa\": 200.0,\n",
        "        \"VRDeck\": 2.0,\n",
        "        \"Cabin_Deck\": \"B\",\n",
        "        \"Cabin_Side\": \"P\",\n",
        "        \"Cabin_Region\": \"A\",\n",
        "        \"People_in_Cabin_Num\": 14,\n",
        "        \"People_in_Cabin_Deck\": 700,\n",
        "        \"Family_Size\": 4,\n",
        "        \"Group_Size\": 2,\n",
        "        \"Age_Cat\": \"Pre_Adult\"\n",
        "        }\n",
        "      ],\n",
        "    \"method\": \"predict\"\n",
        "}\n",
        "# Convert to JSON string\n",
        "input_data = json.dumps(data)\n",
        "with open(\"data.json\", \"w\") as _f:\n",
        "    _f.write(input_data)\n",
        "\n",
        "# Set the content type\n",
        "headers = {'Content-Type': 'application/json'}\n",
        "# If authentication is enabled, set the authorization header\n",
        "headers['Authorization'] = f'Bearer {key}'\n",
        "\n",
        "# Make the request and display the response\n",
        "resp = requests.post(scoring_uri, input_data, headers=headers)\n",
        "print(resp.json())\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "{\"result\": [false]}\n"
        }
      ],
      "execution_count": 26,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1706755055697
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: In the cell below, print the logs of the web service and delete the service"
      ],
      "metadata": {
        "collapsed": true,
        "gather": {
          "logged": 1598432765711
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile logs.py\n",
        "from azureml.core import Workspace, Webservice\n",
        "from azureml.exceptions import WebserviceException\n",
        "import time\n",
        "\n",
        "# Load the Azure ML workspace\n",
        "ws = Workspace.from_config()\n",
        "\n",
        "# Name of the web service\n",
        "service_name = 'web-service-automl'\n",
        "\n",
        "# Function to attempt to delete the service\n",
        "def try_delete_service(service):\n",
        "    try:\n",
        "        service.delete()\n",
        "        print(\"Web service deleted successfully.\")\n",
        "        return True\n",
        "    except WebserviceException as e:\n",
        "        print(f\"Error deleting web service: {str(e)}\")\n",
        "        return False\n",
        "\n",
        "# Get a reference to the web service\n",
        "service = Webservice(workspace=ws, name=service_name)\n",
        "\n",
        "# Print logs\n",
        "print(\"Web service logs:\")\n",
        "print(service.get_logs())\n",
        "\n",
        "# Wait for deployment operation to complete\n",
        "try:\n",
        "    service.wait_for_deployment()\n",
        "except WebserviceException as e:\n",
        "    # Ignore the exception related to the operation status\n",
        "    if \"No operation endpoint\" not in str(e) and \"Long running operation information not known\" not in str(e):\n",
        "        raise\n",
        "\n",
        "# Attempt to delete the deployed web service with retries\n",
        "max_retries = 3\n",
        "retry_count = 0\n",
        "\n",
        "while retry_count < max_retries:\n",
        "    if try_delete_service(service):\n",
        "        break\n",
        "    else:\n",
        "        retry_count += 1\n",
        "        print(f\"Retrying deletion (attempt {retry_count}/{max_retries})...\")\n",
        "        time.sleep(10)  # Wait for 10 seconds before retrying\n",
        "\n",
        "if retry_count == max_retries:\n",
        "    print(\"Max retries reached. Unable to delete the web service.\")\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Overwriting logs.py\n"
        }
      ],
      "execution_count": 30,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!python logs.py"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Web service logs:\n2024-01-29T02:19:59,463994100+00:00 - rsyslog/run \n2024-01-29T02:19:59,473020200+00:00 - gunicorn/run \n2024-01-29T02:19:59,481847500+00:00 | gunicorn/run | \n2024-01-29T02:19:59,486636100+00:00 | gunicorn/run | ###############################################\n2024-01-29T02:19:59,493631400+00:00 | gunicorn/run | AzureML Container Runtime Information\n2024-01-29T02:19:59,499912100+00:00 | gunicorn/run | ###############################################\n2024-01-29T02:19:59,504231000+00:00 | gunicorn/run | \n2024-01-29T02:19:59,520512700+00:00 | gunicorn/run | \n2024-01-29T02:19:59,538671200+00:00 - nginx/run \n2024-01-29T02:19:59,545640900+00:00 | gunicorn/run | AzureML image information: openmpi4.1.0-ubuntu20.04, Materializaton Build:20231216.v3\n2024-01-29T02:19:59,547958300+00:00 | gunicorn/run | \n2024-01-29T02:19:59,550264400+00:00 | gunicorn/run | \n2024-01-29T02:19:59,556724100+00:00 | gunicorn/run | PATH environment variable: /azureml-envs/azureml-automl/bin:/opt/miniconda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n2024-01-29T02:19:59,558762400+00:00 | gunicorn/run | PYTHONPATH environment variable: \n2024-01-29T02:19:59,561202400+00:00 | gunicorn/run | \n2024-01-29T02:20:04,387831835+00:00 | gunicorn/run | CONDAPATH environment variable: /opt/miniconda\n\n# conda environments:\n#\n                         /azureml-envs/azureml-automl\nbase                     /opt/miniconda\n\n2024-01-29T02:20:05,486458050+00:00 | gunicorn/run | \n2024-01-29T02:20:05,488466652+00:00 | gunicorn/run | Pip Dependencies (before dynamic installation)\n\nadal==1.2.7\nanyio==4.2.0\napplicationinsights==0.11.10\narch==5.3.1\nargcomplete==3.2.1\nasttokens==2.4.1\nattrs==23.1.0\nazure-common==1.1.28\nazure-core==1.29.6\nazure-graphrbac==0.61.1\nazure-identity==1.15.0\nazure-mgmt-authorization==4.0.0\nazure-mgmt-containerregistry==10.3.0\nazure-mgmt-core==1.4.0\nazure-mgmt-keyvault==10.3.0\nazure-mgmt-network==25.1.0\nazure-mgmt-resource==23.0.1\nazure-mgmt-storage==21.1.0\nazure-storage-blob==12.19.0\nazure-storage-queue==12.9.0\nazureml-automl-core==1.54.0\nazureml-automl-runtime==1.54.0\nazureml-core==1.54.0.post1\nazureml-dataprep==4.12.8\nazureml-dataprep-native==38.0.0\nazureml-dataprep-rslex==2.19.6\nazureml-dataset-runtime==1.54.0.post1\nazureml-defaults==1.54.0\nazureml-inference-server-http==0.8.4.2\nazureml-interpret==1.54.0\nazureml-mlflow==1.54.0.post1\nazureml-pipeline-core==1.54.0\nazureml-responsibleai==1.54.0\nazureml-telemetry==1.54.0\nazureml-train-automl-client==1.54.0.post1\nazureml-train-automl-runtime==1.54.0.post1\nazureml-train-core==1.54.0\nazureml-train-restclients-hyperdrive==1.54.0\nazureml-training-tabular==1.54.0\nbackcall==0.2.0\nbackports.tempfile==1.0\nbackports.weakref==1.0.post1\nbcrypt==4.1.2\nbokeh==2.4.3\nboto==2.49.0\nboto3==1.20.19\nbotocore==1.23.19\nBottleneck @ file:///home/conda/feedstock_root/build_artifacts/bottleneck_1696017999103/work\nBrotli @ file:///home/conda/feedstock_root/build_artifacts/brotli-split_1695989787169/work\ncachetools==5.3.2\ncertifi @ file:///home/conda/feedstock_root/build_artifacts/certifi_1700303426725/work/certifi\ncffi @ file:///home/conda/feedstock_root/build_artifacts/cffi_1696001773319/work\ncharset-normalizer @ file:///home/conda/feedstock_root/build_artifacts/charset-normalizer_1698833585322/work\nclick==8.1.7\ncloudpickle @ file:///home/conda/feedstock_root/build_artifacts/cloudpickle_1598400192773/work\ncmdstanpy==1.2.0\ncoloredlogs==15.0.1\ncontextlib2==21.6.0\ncontourpy==1.1.1\nconvertdate==2.4.0\ncryptography @ file:///home/conda/feedstock_root/build_artifacts/cryptography-split_1701563203981/work\ncycler==0.12.1\nCython==3.0.6\ndask==2023.2.0\ndatabricks-cli==0.18.0\ndataclasses==0.6\ndebugpy==1.8.0\ndecorator==5.1.1\ndice-ml==0.9\ndill==0.3.7\ndistributed==2023.2.0\ndistro==1.8.0\ndocker==6.1.3\ndotnetcore2==3.1.23\neconml==0.14.1\nentrypoints==0.4\nephem==4.1.5\nerroranalysis==0.5.2\nexceptiongroup==1.2.0\nexecuting==2.0.1\nfairlearn==0.7.0\nfire==0.5.0\nFlask==2.2.5\nFlask-Cors==3.0.10\nflatbuffers==23.5.26\nfonttools==4.47.0\nfsspec==2023.12.2\nfusepy==3.0.1\ngensim==3.8.3\ngitdb==4.0.11\nGitPython==3.1.40\ngoogle-api-core==2.15.0\ngoogle-auth==2.25.2\ngoogleapis-common-protos==1.62.0\ngunicorn==20.1.0\nh5py==3.10.0\nholidays @ file:///home/conda/feedstock_root/build_artifacts/holidays_1689631177263/work\nhumanfriendly==10.0\nidna @ file:///home/conda/feedstock_root/build_artifacts/idna_1701026962277/work\nimportlib-metadata==7.0.0\nimportlib-resources==6.1.1\ninference-schema==1.7\ninterpret-community==0.30.0\ninterpret-core==0.4.3\nipykernel==6.8.0\nipython==8.12.3\nisodate==0.6.1\nitsdangerous==2.1.2\njedi==0.19.1\njeepney==0.8.0\nJinja2==3.1.2\njmespath==0.10.0\njoblib @ file:///home/conda/feedstock_root/build_artifacts/joblib_1663332044897/work\njsonpickle==3.0.2\njsonschema==4.20.0\njsonschema-specifications==2023.11.2\njupyter_client==7.4.9\njupyter_core==5.5.1\nkeras2onnx==1.6.0\nkiwisolver==1.4.5\nknack==0.11.0\nlightgbm==3.2.1\nllvmlite==0.38.1\nlocket==1.0.0\nLunarCalendar==0.0.9\nMarkupSafe==2.1.2\nmatplotlib==3.7.4\nmatplotlib-inline==0.1.6\nml-wrappers==0.5.3\nmlflow-skinny==2.9.2\nmltable==1.5.0\nmpmath==1.3.0\nmsal==1.26.0\nmsal-extensions==1.0.0\nmsgpack==1.0.7\nmsrest==0.7.1\nmsrestazure==0.6.4\nndg-httpsclient==0.5.1\nnest-asyncio==1.5.8\nnetworkx==2.5\nnumba==0.55.2\nnumexpr @ file:///home/conda/feedstock_root/build_artifacts/numexpr_1689950431905/work\nnumpy @ file:///home/conda/feedstock_root/build_artifacts/numpy_1653325300596/work\noauthlib==3.2.2\nonnx==1.14.1\nonnxconverter-common==1.13.0\nonnxmltools==1.11.2\nonnxruntime==1.14.1\nopencensus==0.11.3\nopencensus-context==0.1.3\nopencensus-ext-azure==1.1.12\npackaging @ file:///home/conda/feedstock_root/build_artifacts/packaging_1696202382185/work\npandas==1.3.5\nparamiko==3.4.0\nparso==0.8.3\npartd==1.4.1\npathspec==0.12.1\npatsy==0.5.4\npexpect==4.9.0\npickleshare==0.7.5\nPillow==10.1.0\npkginfo==1.9.6\npkgutil_resolve_name==1.3.10\nplatformdirs @ file:///home/conda/feedstock_root/build_artifacts/platformdirs_1701708255999/work\npmdarima==1.8.5\npooch @ file:///home/conda/feedstock_root/build_artifacts/pooch_1698245576425/work\nportalocker==2.8.2\nprompt-toolkit==3.0.43\nproperty-cached==1.6.4\nprophet==1.1.4\nprotobuf==3.20.3\npsutil==5.9.3\nptyprocess==0.7.0\npure-eval==0.2.2\npy-cpuinfo==5.0.0\npyarrow==11.0.0\npyasn1==0.5.1\npyasn1-modules==0.3.0\npycparser @ file:///home/conda/feedstock_root/build_artifacts/pycparser_1636257122734/work\npydantic==1.10.13\nPygments==2.17.2\nPyJWT==2.8.0\nPyMeeus==0.5.12\nPyNaCl==1.5.0\npyOpenSSL @ file:///home/conda/feedstock_root/build_artifacts/pyopenssl_1685514481738/work\npyparsing==3.1.1\nPySocks @ file:///home/conda/feedstock_root/build_artifacts/pysocks_1661604839144/work\npython-dateutil @ file:///home/conda/feedstock_root/build_artifacts/python-dateutil_1626286286081/work\npytz @ file:///home/conda/feedstock_root/build_artifacts/pytz_1693930252784/work\nPyYAML==6.0.1\npyzmq==25.1.2\nraiutils==0.4.1\nreferencing==0.32.0\nrequests @ file:///home/conda/feedstock_root/build_artifacts/requests_1684774241324/work\nrequests-oauthlib==1.3.1\nresponsibleai==0.28.0\nrpds-py==0.15.2\nrsa==4.9\ns3transfer==0.5.2\nscikit-learn==1.0.2\nscipy @ file:///home/conda/feedstock_root/build_artifacts/scipy-split_1683900206454/work/base/dist/scipy-1.10.1-cp38-cp38-linux_x86_64.whl#sha256=13ab5c17dedeb97a65ba90de1c51475f2d3ae0fe50bc43e9b018cc2943541de4\nSecretStorage==3.3.3\nsemver==2.13.0\nsetuptools-git==1.2\nshap==0.41.0\nsix @ file:///home/conda/feedstock_root/build_artifacts/six_1620240208055/work\nskl2onnx==1.14.1\nsklearn-pandas==1.7.0\nslicer==0.0.7\nsmart-open==1.9.0\nsmmap==5.0.1\nsniffio==1.3.0\nsortedcontainers==2.4.0\nsparse==0.14.0\nsqlparse==0.4.4\nstack-data==0.6.3\nstanio==0.3.0\nstatsmodels==0.13.5\nsympy==1.12\ntabulate==0.9.0\ntblib==3.0.0\ntermcolor==2.4.0\nthreadpoolctl @ file:///home/conda/feedstock_root/build_artifacts/threadpoolctl_1689261241048/work\ntoolz==0.12.0\ntornado==6.4\ntqdm==4.66.1\ntraitlets==5.14.0\ntyping_extensions==4.9.0\nurllib3==1.26.18\nwcwidth==0.2.12\nwebsocket-client==1.7.0\nWerkzeug==3.0.1\nwrapt==1.12.1\nxgboost==1.3.3\nzict==3.0.0\nzipp==3.17.0\n\n2024-01-29T02:20:12,714825852+00:00 | gunicorn/run | \n2024-01-29T02:20:12,720438570+00:00 | gunicorn/run | Entry script directory: /var/azureml-app\n2024-01-29T02:20:12,722865178+00:00 | gunicorn/run | \n2024-01-29T02:20:12,726146789+00:00 | gunicorn/run | ###############################################\n2024-01-29T02:20:12,729267699+00:00 | gunicorn/run | Dynamic Python Package Installation\n2024-01-29T02:20:12,731913008+00:00 | gunicorn/run | ###############################################\n2024-01-29T02:20:12,734383516+00:00 | gunicorn/run | \n2024-01-29T02:20:12,740659237+00:00 | gunicorn/run | Dynamic Python package installation is disabled.\n2024-01-29T02:20:12,745069552+00:00 | gunicorn/run | \n2024-01-29T02:20:12,747400859+00:00 | gunicorn/run | ###############################################\n2024-01-29T02:20:12,749809567+00:00 | gunicorn/run | Checking if the Python package azureml-inference-server-http is installed\n2024-01-29T02:20:12,756859490+00:00 | gunicorn/run | ###############################################\n2024-01-29T02:20:12,759224798+00:00 | gunicorn/run | \n2024-01-29T02:20:15,668274088+00:00 | gunicorn/run | \n2024-01-29T02:20:15,670712396+00:00 | gunicorn/run | ###############################################\n2024-01-29T02:20:15,678697822+00:00 | gunicorn/run | AzureML Inference Server\n2024-01-29T02:20:15,681052230+00:00 | gunicorn/run | ###############################################\n2024-01-29T02:20:15,683033336+00:00 | gunicorn/run | \n2024-01-29T02:20:15,690760062+00:00 | gunicorn/run | Starting AzureML Inference Server HTTP.\n2024-01-29 02:20:16,564 I [76] azmlinfsrv - Loaded logging config from /azureml-envs/azureml-automl/lib/python3.8/site-packages/azureml_inference_server_http/logging.json\n2024-01-29 02:20:17,152 I [76] gunicorn.error - Starting gunicorn 20.1.0\n2024-01-29 02:20:17,153 I [76] gunicorn.error - Listening at: http://0.0.0.0:31311 (76)\n2024-01-29 02:20:17,153 I [76] gunicorn.error - Using worker: sync\n2024-01-29 02:20:17,168 I [135] gunicorn.error - Booting worker with pid: 135\n\nAzure ML Inferencing HTTP server v0.8.4.2\n\n\nServer Settings\n---------------\nEntry Script Name: /var/azureml-app/main.py\nModel Directory: /var/azureml-app/azureml-models/6bb99c332d8047a53/1\nConfig File: None\nWorker Count: 1\nWorker Timeout (seconds): 300\nServer Port: 31311\nHealth Port: 31311\nApplication Insights Enabled: false\nApplication Insights Key: None\nInferencing HTTP server version: azmlinfsrv/0.8.4.2\nCORS for the specified origins: None\nCreate dedicated endpoint for health: None\n\n\nServer Routes\n---------------\nLiveness Probe: GET   127.0.0.1:31311/\nScore:          POST  127.0.0.1:31311/score\n\n2024-01-29 02:20:21,141 I [135] azmlinfsrv - AML_FLASK_ONE_COMPATIBILITY is set. Patched Flask to ensure compatibility with Flask 1.\nInitializing logger\n2024-01-29 02:20:21,150 I [135] azmlinfsrv - Starting up app insights client\n2024-01-29 02:20:26,895 I [135] azmlinfsrv.user_script - Found user script at /var/azureml-app/main.py\n2024-01-29 02:20:26,895 I [135] azmlinfsrv.user_script - run() is decorated with @input_schema. Server will invoke it with the following arguments: Inputs, GlobalParameters.\n2024-01-29 02:20:26,895 I [135] azmlinfsrv.user_script - Invoking user's init function\nERROR:prophet.plot:Importing plotly failed. Interactive plots will not work.\n2024-01-29 02:21:07,288 I [135] azmlinfsrv.user_script - Users's init has completed successfully\n2024-01-29 02:21:07,313 I [135] azmlinfsrv.swagger - Swaggers are prepared for the following versions: [2, 3, 3.1].\n2024-01-29 02:21:07,313 I [135] azmlinfsrv - Scoring timeout is set to 60000\n2024-01-29 02:21:07,313 I [135] azmlinfsrv - Worker with pid 135 ready for serving traffic\n2024-01-29 02:21:07,323 W [135] azmlinfsrv - x-ms-request-id header has been deprecated and will be removed from future versions of the server. Please use x-ms-client-request-id.\n2024-01-29 02:21:07,325 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:21:07 +0000] \"GET / HTTP/1.0\" 200 7 \"-\" \"Go-http-client/1.1\"\n2024-01-29 02:21:07,327 W [135] azmlinfsrv - x-ms-request-id header has been deprecated and will be removed from future versions of the server. Please use x-ms-client-request-id.\n2024-01-29 02:21:07,332 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:21:07 +0000] \"GET / HTTP/1.0\" 200 7 \"-\" \"Go-http-client/1.1\"\n2024-01-29 02:21:07,334 W [135] azmlinfsrv - x-ms-request-id header has been deprecated and will be removed from future versions of the server. Please use x-ms-client-request-id.\n2024-01-29 02:21:07,336 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:21:07 +0000] \"GET / HTTP/1.0\" 200 7 \"-\" \"Go-http-client/1.1\"\n2024-01-29 02:21:07,337 W [135] azmlinfsrv - x-ms-request-id header has been deprecated and will be removed from future versions of the server. Please use x-ms-client-request-id.\n2024-01-29 02:21:07,339 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:21:07 +0000] \"GET / HTTP/1.0\" 200 7 \"-\" \"Go-http-client/1.1\"\n2024-01-29 02:21:07,341 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:21:07 +0000] \"GET / HTTP/1.0\" 200 7 \"-\" \"curl/7.58.0\"\n2024-01-29 02:21:07,343 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:21:07 +0000] \"GET / HTTP/1.0\" 200 7 \"-\" \"curl/7.58.0\"\n2024-01-29 02:21:17,873 W [135] azmlinfsrv - x-ms-request-id header has been deprecated and will be removed from future versions of the server. Please use x-ms-client-request-id.\n2024-01-29 02:21:17,875 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:21:17 +0000] \"GET / HTTP/1.0\" 200 7 \"-\" \"Go-http-client/1.1\"\n2024-01-29 02:21:17,883 W [135] azmlinfsrv - x-ms-request-id header has been deprecated and will be removed from future versions of the server. Please use x-ms-client-request-id.\n2024-01-29 02:21:17,884 I [135] azmlinfsrv - GET /swagger.json 200 1.077ms 4167\n2024-01-29 02:21:17,886 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:21:17 +0000] \"GET /swagger.json HTTP/1.0\" 200 4167 \"-\" \"Go-http-client/1.1\"\n2024-01-29 02:23:16,539 W [135] azmlinfsrv - x-ms-request-id header has been deprecated and will be removed from future versions of the server. Please use x-ms-client-request-id.\n2024-01-29 02:23:16,541 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:23:16 +0000] \"GET / HTTP/1.0\" 200 7 \"-\" \"Go-http-client/1.1\"\n2024-01-29 02:23:16,547 W [135] azmlinfsrv - x-ms-request-id header has been deprecated and will be removed from future versions of the server. Please use x-ms-client-request-id.\n2024-01-29 02:23:16,549 I [135] azmlinfsrv - GET /swagger.json 200 1.981ms 4167\n2024-01-29 02:23:16,550 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:23:16 +0000] \"GET /swagger.json HTTP/1.0\" 200 4167 \"-\" \"Go-http-client/1.1\"\n2024-01-29 02:23:18,591 W [135] azmlinfsrv - x-ms-request-id header has been deprecated and will be removed from future versions of the server. Please use x-ms-client-request-id.\n2024-01-29 02:23:18,592 I [135] azmlinfsrv - GET /swagger.json 200 0.692ms 4167\n2024-01-29 02:23:18,592 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:23:18 +0000] \"GET /swagger.json HTTP/1.0\" 200 4167 \"-\" \"Go-http-client/1.1\"\n2024-01-29 02:23:43,275 W [135] azmlinfsrv - x-ms-request-id header has been deprecated and will be removed from future versions of the server. Please use x-ms-client-request-id.\n2024-01-29 02:23:43,477 I [135] azmlinfsrv - POST /score 200 201.389ms 19\n2024-01-29 02:23:43,479 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:23:43 +0000] \"POST /score HTTP/1.0\" 200 19 \"-\" \"python-requests/2.31.0\"\n2024-01-29 02:23:56,959 W [135] azmlinfsrv - x-ms-request-id header has been deprecated and will be removed from future versions of the server. Please use x-ms-client-request-id.\n2024-01-29 02:23:56,961 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:23:56 +0000] \"GET / HTTP/1.0\" 200 7 \"-\" \"Go-http-client/1.1\"\n2024-01-29 02:23:56,968 W [135] azmlinfsrv - x-ms-request-id header has been deprecated and will be removed from future versions of the server. Please use x-ms-client-request-id.\n2024-01-29 02:23:56,970 I [135] azmlinfsrv - GET /swagger.json 200 1.421ms 4167\n2024-01-29 02:23:56,972 I [135] gunicorn.access - 127.0.0.1 - - [29/Jan/2024:02:23:56 +0000] \"GET /swagger.json HTTP/1.0\" 200 4167 \"-\" \"Go-http-client/1.1\"\n\nNo operation endpoint\n\nLong running operation information not known, unable to poll. Current state is Healthy\n\nWeb service deleted successfully.\n"
        }
      ],
      "execution_count": 31,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Submission Checklist**\n",
        "- I have registered the model.\n",
        "- I have deployed the model with the best accuracy as a webservice.\n",
        "- I have tested the webservice by sending a request to the model endpoint.\n",
        "- I have deleted the webservice and shutdown all the computes that I have used.\n",
        "- I have taken a screenshot showing the model endpoint as active.\n",
        "- The project includes a file containing the environment details.\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {}
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python38-azureml"
    },
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      },
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}